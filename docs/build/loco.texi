\input texinfo  @c -*-texinfo-*-
@settitle Loco

@dircategory Emacs
@direntry
* Loco: (loco). Enter complex key sequences with ease!
@end direntry

@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Loco
@end titlepage

@node Top
@top Loco

Loco is a library and minor mode to help you enter complex key sequences with ease.

@menu
* Table of contents::
* Introduction::
* Installation::
* Background::
* Usage::
* Author and copyright::
* License::
* Colophon::
@end menu

@node Table of contents
@chapter Table of contents
@itemize
@item
@ref{Examples using the default configuration,,Examples using the default configuration}
@itemize
@end itemize

@item
@ref{From MELPA,,From MELPA}
@itemize
@end itemize

@item
@ref{From source,,From source}
@itemize
@end itemize

@item
@ref{Keys key sequences and commands,,Keys key sequences and commands}
@itemize
@end itemize

@item
@ref{How Loco is different,,How Loco is different}
@itemize
@end itemize

@item
@ref{Enabling and disabling Loco,,Enabling and disabling Loco}
@itemize
@end itemize

@item
@ref{The default configuration,,The default configuration}
@itemize
@item
@ref{Activating Loco,,Activating Loco}
@itemize
@end itemize

@item
@ref{Entering key sequences,,Entering key sequences}
@itemize
@item
@ref{Normal operation ie when the Assist Menu is closed,,Normal operation ie when the Assist Menu is closed}
@itemize
@end itemize

@item
@ref{Assisted operation ie when the Assist Menu is open,,Assisted operation ie when the Assist Menu is open}
@itemize
@end itemize

@item
@ref{Rock and roll,,Rock and roll}
@itemize
@end itemize

@item
@ref{Persistent keys,,Persistent keys}
@itemize
@end itemize

@item
@ref{Typical key sequences and their translations,,Typical key sequences and their translations}
@itemize
@end itemize

@item
@ref{More difficult key sequences and their translations,,More difficult key sequences and their translations}
@itemize
@end itemize

@end itemize

@end itemize

@item
@ref{Describing commands,,Describing commands}
@itemize
@end itemize

@item
@ref{Standard configurations,,Standard configurations}
@itemize
@item
@ref{Details}
@itemize
@end itemize

@item
@ref{Summary}
@itemize
@end itemize

@end itemize

@item
@ref{Repeating commands,,Repeating commands}
@itemize
@end itemize

@item
@ref{Working with physical modifier keys,,Working with physical modifier keys}
@itemize
@end itemize

@item
@ref{Considerations when using a terminal,,Considerations when using a terminal}
@itemize
@end itemize

@item
@ref{Customization}
@itemize
@item
@ref{Using the "Easy Customization Interface",,Using the "Easy Customization Interface"}
@itemize
@end itemize

@item
@ref{Mapping Caps Lock to Control,,Mapping Caps Lock to Control}
@itemize
@end itemize

@item
@ref{Going further,,Going further}
@itemize
@end itemize

@end itemize

@end itemize

@node Introduction
@chapter Introduction
Loco is a @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html,package} for @uref{https://www.gnu.org/software/emacs/,Emacs}. Loco lets you type any @ref{Keys key sequences and commands,,key sequence}, including those requiring the modifiers @kbd{Alt}, @kbd{Control}, @kbd{Hyper}, @kbd{Meta}, or @kbd{Super}, without using any physical modifier keys except @kbd{Shift}. This makes it easy to enter key sequences that are complicated or use hard-to-reach keys.

Loco works by translating key sequences from one form to another. It does not redefine the @uref{https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf,standard key bindings}, nor does it prevent you from @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html,defining your own}. Learn the few rules of Loco and be productive immediately, using the key bindings you already know.

Loco does not preclude the use of physical modifier keys; it integrates well with them. There may even be some key bindings for which you find using physical modifier keys preferable. And it works equally well in the @uref{https://en.wikipedia.org/wiki/Graphical_user_interface,GUI} or the @uref{https://en.wikipedia.org/wiki/Computer_terminal,terminal}, working around the @ref{Considerations when using a terminal,,limitations of terminals} that prevent the entry of certain keys, allowing you to move between both easily.

When enabled, and using the default configuration, pressing @kbd{S-<return>} will activate Loco.

@quotation
In Emacs, @kbd{S-<return>} means hold @kbd{Shift} then press @kbd{Return}.
@end quotation
Once activated, you can type any key sequence, taking advantage of the following special keys to help you avoid pressing any physical modifier keys:

@itemize
@item
@kbd{j} to apply the modifier @kbd{Control} to the next non‑special key;
@item
@kbd{k} to apply the modifier @kbd{Meta} to the next non‑special key; or
@item
@kbd{l} to open a menu that includes options to:
@itemize
@item
apply other modifiers (for example, @kbd{Alt}, @kbd{Hyper}, or @kbd{Super}) to the next non‑special key; or
@item
enter the special keys themselves as the literal characters @emph{j}, @emph{k}, or @emph{l}.
@end itemize

@end itemize

@menu
* Examples using the default configuration::
@end menu

@node Examples using the default configuration
@section Examples (using the default configuration)
@multitable {Typed Key Sequence} {Translated Key Sequence} {@code{save-buffer}} 
@headitem 
Typed Key Sequence
 @tab Translated Key Sequence
 @tab Command
@item 
@kbd{j d}
 @tab @kbd{C-d}
 @tab @code{delete-char}
@item 
@kbd{k d}
 @tab @kbd{M-d}
 @tab @code{kill-word}
@item 
@kbd{j h i}
 @tab @kbd{C-h i}
 @tab @code{info}
@item 
@kbd{j x j s}
 @tab @kbd{C-x C-s}
 @tab @code{save-buffer}
@end multitable

The default configuration is not the only way to use Loco, it is one of a set of pre-defined @ref{Standard configurations,,standard configurations}. Loco can also be @ref{Customization,,extensively customized} with just a few lines of code. Many options are possible, including:

@itemize
@item
Changing the key bindings used to enable, disable, or activate Loco;
@item
Changing the keys used while Loco reads a key sequence;
@item
Configuring activation keys that also function as modifiers; and
@item
Configuring activation keys that avoid modifiers completely.
@end itemize

@node Installation
@chapter Installation

@menu
* From MELPA::
* From source::
@end menu

@node From MELPA
@section From MELPA
To install Loco from @uref{https://melpa.org,MELPA}, follow these steps:

@enumerate 
@item
Modify your Emacs configuration

@itemize
@item
Open your @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html,Emacs init file} and add the following:

@verbatim
;; Add MELPA to the list of package archives
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Refresh the descriptions of all packages in all package archives
(unless package-archive-contents
  (package-refresh-contents))

;; Install the `loco` package
(unless (package-installed-p 'loco)
  (package-install 'loco))

;; Load `loco`
(require 'loco)

;; Set the default configuration for Loco
(loco-set-default-configuration)

;; Enable Loco in all buffers
(global-loco-mode 1)
@end verbatim

@item
Apply your changes by either restarting Emacs or evaluating the modified sections of your configuration file.

@end itemize

@end enumerate

@node From source
@section From source
To install Loco from source, follow these steps:

@enumerate 
@item
Clone the @uref{https://github.com/csmclaren/loco,official repository} from GitHub

@verbatim
git clone https://github.com/csmclaren/loco.git
@end verbatim

@item
Modify your Emacs configuration

@itemize
@item
Open your @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html,Emacs init file} and add the following, making sure to replace @code{/path/to/loco} with the path to your cloned repository:

@verbatim
;; Add the load path
(add-to-list 'load-path "/path/to/loco")

;; Load `loco`
(require 'loco)

;; Set the default configuration for Loco
(loco-set-default-configuration)

;; Enable Loco in all buffers
(global-loco-mode 1)
@end verbatim

@item
Apply your changes by either restarting Emacs or evaluating the modified sections of your configuration file.

@end itemize

@end enumerate

@node Background
@chapter Background

@menu
* Keys key sequences and commands::
* How Loco is different::
@end menu

@node Keys key sequences and commands
@section Keys, key sequences, and commands
When discussing keys, it is helpful to distinguish between @emph{physical} keys and @emph{logical} keys.

A physical key is what you press with your fingers on the keyboard. Some physical keys are called @emph{modifier} keys. Emacs recognizes six modifier keys: @kbd{Alt}, @kbd{Control}, @kbd{Hyper}, @kbd{Meta}, @kbd{Super}, and @kbd{Shift}. Your keyboard may not have all of these keys. Furthermore, your keyboard may have different names for the modifier keys that it does have. For example, @kbd{Super} is called @kbd{Command} on @uref{https://en.wikipedia.org/wiki/Apple_keyboards,Apple keyboards}, and @kbd{Meta} is called @kbd{Alt} or @kbd{Option} on most modern keyboards. Most physical keys, like letters, numbers, and symbols, are @emph{non-modifier} keys.

A logical key (or simply a @emph{key}) is zero or more modifier keys pressed simultaneously with a non-modifier key. For example, holding down the physical @kbd{Control} key (written as @kbd{C-}) while pressing the physical @kbd{x} key produces the key @kbd{C-x}.

Key sequences are composed of one or more keys. For example, the key sequence @kbd{C-x s} is composed of two keys: @kbd{C-x} and @kbd{s}. Key sequences can be bound to commands. For example, @kbd{C-x s} is bound to the command @code{save-all-files}.

By composing key sequences from keys, a large number of key sequences can be created from a small number of keys. This is similar to how an alphabet can be used to compose the words of a language: a large number of words can be created from a small number of letters.

@node How Loco is different
@section How Loco is different
On modern keyboards, which typically have small or hard-to-reach modifier keys, or for people with @uref{https://en.wikipedia.org/wiki/Repetitive_strain_injury,RSI} or other forms of limited mobility, pressing one or more keys simultaneously can be difficult or even painful. This is especially true when two or more modifier keys are required to complete a single key, or if a certain modifier key is particularly hard to reach.

To help solve this problem, Loco extends the idea of composing key sequences from keys to the level of the key itself. In Loco, logical keys can be composed of one or more physical keys pressed one after the other, not simultaneously. Additionally, Loco uses certain easy-to-reach non-modifier keys (or @emph{special} keys) to assist you with key entry.

@node Usage
@chapter Usage

@menu
* Enabling and disabling Loco::
* The default configuration::
* Describing commands::
* Standard configurations::
* Repeating commands::
* Working with physical modifier keys::
* Considerations when using a terminal::
* Customization::
@end menu

@node Enabling and disabling Loco
@section Enabling and disabling Loco
Loco works by adding a @uref{https://www.gnu.org/software/emacs/manual/html_node/elisp/Minor-Modes.html,minor mode} to Emacs. This mode can be enabled or disabled in some or all buffers.

To enable or disable Loco @emph{in the current buffer}, use the command @code{loco-mode}. The key sequence @kbd{C-c ,} is bound to this command; pressing it will toggle Loco in the current buffer.

You can also call this command using Emacs Lisp with:

@itemize
@item
No argument, @code{nil}, or a positive number to enable Loco in the current buffer;

@verbatim
(loco-mode 1) ; Enable in the current buffer
@end verbatim

@item
A zero or negative number to disable Loco in the current buffer; or

@verbatim
(loco-mode 0) ; Disable in the current buffer
@end verbatim

@item
The symbol @code{toggle} to toggle Loco in the current buffer.

@verbatim
(loco-mode 'toggle) ; Toggle in the current buffer
@end verbatim

@end itemize

To enable or disable Loco @emph{in all buffers}, use the command @code{global-loco-mode}. The key sequence @kbd{C-c .} is bound to this command; pressing it will toggle Loco in all buffers.

@quotation
This command will override any local settings.
@end quotation
You can also call this command using Emacs Lisp with:

@itemize
@item
No argument, @code{nil}, or a positive number to enable Loco in all buffers;

@verbatim
(global-loco-mode 1) ; Enable in all buffers
@end verbatim

@item
A zero or negative number to disable Loco in all buffers; or

@verbatim
(global-loco-mode 0) ; Disable in all buffers
@end verbatim

@item
The symbol @code{toggle} to toggle Loco in all buffers.

@verbatim
(global-loco-mode 'toggle) ; Toggle in all buffers
@end verbatim

@end itemize

When Loco is @emph{disabled} in the current buffer, all keys can be typed normally as if Loco were not installed, with the exception of @kbd{C-c ,} and @kbd{C-c .} themselves, which are bound in the global keymap.

When Loco is @emph{enabled} in the current buffer it will place an indicator, which Emacs calls a "lighter", in the mode line of that buffer. The lighter for Loco is simply the string "Loco".

@node The default configuration
@section The default configuration
@quotation
This section assumes that you are using the default configuration for Loco, as recommended in @ref{Installation}.
@end quotation

@menu
* Activating Loco::
* Entering key sequences::
@end menu

@node Activating Loco
@subsection Activating Loco
When Loco is enabled, it will bind two additional key sequences: @kbd{S-<return>} and @kbd{C-h S-<return>}. Pressing either of these will @emph{activate} Loco.

When Loco is activated, it will prompt you to enter a key sequence, then it will lookup whether or not that key sequence is bound to a command. If a command is found, it will either execute or describe that command, depending on which key sequence was used to activate it. @kbd{S-<return>} tells Loco that it should @emph{execute} the command. @kbd{C-h S-<return>} tells Loco it should @emph{describe} the command.

@node Entering key sequences
@subsection Entering key sequences
When Loco reads a key sequence:

@itemize
@item
It tracks a set of modifiers (@kbd{Alt}, @kbd{Control}, @kbd{Hyper}, @kbd{Meta}, and @kbd{Super}) that it considers "pending".

@item
@kbd{j} and @kbd{k} add @kbd{Control} and @kbd{Meta}, respectively, to the set of pending modifiers, or represent themselves, if their respective modifiers are already pending.

@item
@kbd{l} opens the Assist Menu, a menu which includes commands to toggle pending modifiers (@kbd{a} @kbd{c} @kbd{h} @kbd{m} and @kbd{s}) or enter keys for which there is no other way to enter because they have been repurposed by Loco (@kbd{j} @kbd{k} and @kbd{l} itself).

@item
When a key is pressed to which modifiers could be applied, any pending modifiers from that set are applied to the key, as if the equivalent physical modifier keys were held down at the time the key was pressed. The set (if not empty) is then cleared. The key (now potentially modified) is then added to the key sequence.

@item
When a key is added to the key sequence, Loco will check if the key sequence is bound to a command. If it is a @emph{partial match} to one (or more) commands, Loco will continue to read keys. If it is an @emph{exact match} to a command, Loco will stop reading keys and execute or describe that command (depending on how Loco was activated). Otherwise, Loco will stop reading keys and tell the user that no match was found.

@item
It will display its prompt in the minibuffer. The prompt will consist of:

@itemize
@item
A right-pointing triangle (▶);

@item
The current key sequence, if any, displayed in the normal Emacs style;

@item
The set of pending modifiers, if any, displayed in the normal Emacs style, i.e., @code{A-}, @code{C-}, @code{H-}, @code{M-}, and @code{s-}, corresponding to the modifiers @kbd{Alt}, @kbd{Control}, @kbd{Hyper}, @kbd{Meta}, and @kbd{Super}, respectively; and

@item
The Assist Menu, if open, displayed as @code{[;]} (in its collapsed state) or @code{[achms jkl q x ;]} (in its expanded state).

@end itemize

@end itemize

The following tables explain exactly how key presses are handled while reading a key sequence.

@menu
* Normal operation ie when the Assist Menu is closed::
* Assisted operation ie when the Assist Menu is open::
* Rock and roll::
* Persistent keys::
* Typical key sequences and their translations::
* More difficult key sequences and their translations::
@end menu

@node Normal operation ie when the Assist Menu is closed
@subsubsection Normal operation (i.e., when the Assist Menu is closed)
@multitable {@kbd{l}} {There are two possibilities for how this key is handled. If @kbd{Control} is already pending, apply all pending modifiers to the key (clearing the modifiers), then add the modified key to the key sequence. Otherwise, add @kbd{Control} to the set of pending modifiers.} 
@headitem 
Key
 @tab Rule
@item 
@kbd{j}
 @tab There are two possibilities for how this key is handled. If @kbd{Control} is already pending, apply all pending modifiers to the key (clearing the modifiers), then add the modified key to the key sequence. Otherwise, add @kbd{Control} to the set of pending modifiers.
@item 
@kbd{k}
 @tab There are two possibilities for how this key is handled. If @kbd{Meta} is already pending, apply all pending modifiers to the key (clearing the modifiers), then add the modified key to the key sequence. Otherwise, add @kbd{Meta} to the set of pending modifiers.
@item 
@kbd{l}
 @tab Open the Assist Menu.
@item 
Other
 @tab Apply any pending modifiers to the key (clearing the modifiers), then add the (potentially modified) key to the key sequence.
@end multitable

@node Assisted operation ie when the Assist Menu is open
@subsubsection Assisted operation (i.e., when the Assist Menu is open)
@multitable {@kbd{A} @kbd{C} @kbd{H} @kbd{M} or @kbd{S}} {Toggle @kbd{Alt} @kbd{Control} @kbd{Hyper} @kbd{Meta} or @kbd{Super} respectively, in the set of pending modifiers, but do not close the Assist Menu.} 
@headitem 
Key
 @tab Rule
@item 
@kbd{a} @kbd{c} @kbd{h} @kbd{m} or @kbd{s}
 @tab Toggle @kbd{Alt} @kbd{Control} @kbd{Hyper} @kbd{Meta} or @kbd{Super} respectively, in the set of pending modifiers, and close the Assist Menu.
@item 
@kbd{A} @kbd{C} @kbd{H} @kbd{M} or @kbd{S}
 @tab Toggle @kbd{Alt} @kbd{Control} @kbd{Hyper} @kbd{Meta} or @kbd{Super} respectively, in the set of pending modifiers, but do not close the Assist Menu.
@item 
@kbd{j} @kbd{k} or @kbd{l}
 @tab Apply any pending modifiers to the key (clearing the modifiers), add the (potentially modified) key to the key sequence, and close the Assist Menu.
@item 
@kbd{q}
 @tab Close the Assist Menu and cancel the key sequence (equivalent to @kbd{C-g}).
@item 
@kbd{x}
 @tab Close the Assist Menu.
@item 
@kbd{;}
 @tab Toggle the Assist Menu between its collapsed and expanded states.
@item 
Other
 @tab Discard the key, but do not close the Assist Menu. If the Assist Menu is currently collapsed, expand it to remind the user of all available options.
@end multitable

@node Rock and roll
@subsubsection Rock and roll
The keys @kbd{j}, @kbd{k}, and @kbd{l} were chosen to represent @kbd{Control}, @kbd{Meta}, and the Assist Menu, respectively, because on a @uref{https://en.wikipedia.org/wiki/QWERTY,QWERTY} keyboard these keys are adjacent. This allows you to roll from side to side or rock your fingers back and forth over them.

Furthermore, you can build up the set of pending modifiers for a key in any order; for example, both @kbd{j k} and @kbd{k j} translate to @kbd{C-M-}.

These design choices enable efficient key entry, enhancing your ability to enter these important keys swiftly and accurately.

@node Persistent keys
@subsubsection Persistent keys
On the Assist Menu, the keys used to toggle modifiers (@kbd{a}, @kbd{c}, @kbd{h}, @kbd{m}, and @kbd{s}) can be pressed in conjunction with the physical @kbd{Shift} key (@kbd{A}, @kbd{C}, @kbd{H}, @kbd{M}, and @kbd{S}, respectively).

These @kbd{Shift}-modified keys perform the same operation as their unmodified counterparts but make the Assist Menu @emph{persistent}: after use, the menu remains open to use again.

The advantage of these keys is that multiple modifiers can be added or removed quickly. The disadvantage is that another key (for example, @kbd{x}) is then required to close the Assist Menu.

These keys are optional and not shown on the Assist Menu.

@node Typical key sequences and their translations
@subsubsection Typical key sequences and their translations
Most key sequences do not involve @kbd{Control} or @kbd{Meta} in conjunction with @kbd{j}, @kbd{k}, or @kbd{l}, making them easy to enter.

@multitable {@kbd{j k e} or @kbd{k j e}} {Translated Key Sequence} {@code{forward-sentence}} 
@headitem 
Typed Key Sequence
 @tab Translated Key Sequence
 @tab Command
@item 
@kbd{j e}
 @tab @kbd{C-e}
 @tab @code{move-end-of-line}
@item 
@kbd{k e}
 @tab @kbd{M-e}
 @tab @code{forward-sentence}
@item 
@kbd{j k e} or @kbd{k j e}
 @tab @kbd{C-M-e}
 @tab @code{end-of-defun}
@end multitable

@node More difficult key sequences and their translations
@subsubsection More difficult key sequences and their translations
Nine key sequences involve @kbd{Control} or @kbd{Meta} in conjunction with @kbd{j}, @kbd{k}, or @kbd{l}, making them more difficult to enter.

@multitable {@kbd{j k l l} or @kbd{k j l l}} {Translated Key Sequence} {@code{default-indent-new-line}} 
@headitem 
Typed Key Sequence
 @tab Translated Key Sequence
 @tab Command
@item 
@kbd{j l j} or @kbd{j j}
 @tab @kbd{C-j}
 @tab @code{eval-print-last-sexp}
@item 
@kbd{j l k}
 @tab @kbd{C-k}
 @tab @code{kill-line}
@item 
@kbd{j l l}
 @tab @kbd{C-l}
 @tab @code{recenter-top-bottom}
@item 
@kbd{k l j}
 @tab @kbd{M-j}
 @tab @code{default-indent-new-line}
@item 
@kbd{k l k} or @kbd{k k}
 @tab @kbd{M-k}
 @tab @code{kill-sentence}
@item 
@kbd{k l l}
 @tab @kbd{M-l}
 @tab @code{downcase-word}
@item 
@kbd{j k j} or @kbd{k j j}
 @tab @kbd{C-M-j}
 @tab @code{default-indent-new-line}
@item 
@kbd{j k k} or @kbd{k j k}
 @tab @kbd{C-M-k}
 @tab @code{kill-sexp}
@item 
@kbd{j k l l} or @kbd{k j l l}
 @tab @kbd{C-M-l}
 @tab @code{reposition-window}
@end multitable

@node Describing commands
@section Describing commands
The built-in command @code{describe-key} waits for a key sequence to be input. If that key sequence is bound to a command, it describes the command. This is an excellent way to discover (or remind yourself) of the command to which a key sequence is bound.

In the global keymap, @kbd{C-h k} is bound to @code{describe-key}.

This command reads key sequences directly, without leveraging Loco, but Loco provides similar functionality.

For purposes of describing a key sequence, when Loco is enabled in the current buffer, use @kbd{C-h S-<return>} to activate Loco. Then enter a key sequence, and Loco will describe the command to which it is bound.

@node Standard configurations
@section Standard configurations
A standard configuration is a named set of keys and behaviours for activating Loco and entering key sequences to execute or describe the commands to which they are bound. Eleven such configurations are included in Loco.

Standard configurations can be installed or uninstalled easily by applying @code{loco-set-standard-configuration} or @code{loco-unset-standard-configuration}, respectively, to the name of the configuration.

These allow one to use Loco beyond what is provided by the default configuration, but without requiring more substantial customization. The default configuration is itself defined as one of the standard configurations (@code{shift-return-jk}).

@menu
* Details::
* Summary::
@end menu

@node Details
@subsection Details
@itemize
@item
@code{shift‑return‑jk}

This is the default configuration, described @ref{The default configuration,,above}.

Note that this:

@verbatim
(loco-set-default-configuration)
@end verbatim

is equivalent to:

@verbatim
(loco-set-standard-configuration 'shift‑return‑jk)
@end verbatim

Similarly, this:

@verbatim
(loco-unset-default-configuration)
@end verbatim

is equivalent to:

@verbatim
(loco-unset-standard-configuration 'shift‑return‑jk)
@end verbatim

@item
@code{control‑return‑jk} and @code{super‑return‑jk}

These are similar to @code{shift‑return‑jk}, but use different modifier keys for activation.

Instead of using @kbd{S-<return>} to activate Loco, they use @kbd{C-<return>} and @kbd{s-<return>}, respectively. And instead of using @kbd{C-h S-<return>} for purposes of describing a key sequence, they use @kbd{C-h C-<return>} and @kbd{C-h s-<return>}, respectively.

These configurations may be preferable if @kbd{Control} or @kbd{Super} are better located on your keyboard or if you have already bound @kbd{S-<return>} to another command. Other than the change of activation key, all other functionality remains the same as per @code{shift‑return‑jk}.

@item
@code{shift‑return‑cp}, @code{control‑return‑cp}, and @code{super‑return‑cp}

These are similar to the above three configurations in terms of activation, but use different keys to enter key sequences.

Instead of using @kbd{j} for @kbd{Control}, @kbd{k} for @kbd{Meta}, @kbd{l} to open the Assist Menu, and @kbd{;} to toggle the Assist Menu between its collapsed and expanded states, they use @kbd{,}, @kbd{.}, @kbd{m}, and @kbd{/} respectively.

These configurations may be preferable for those who find it easier to mentally associate the modifiers to punctuation (@kbd{,} and @kbd{.} instead of @kbd{j} and @kbd{k}, respectively), or remember @kbd{m} as "menu".

Note that by using @kbd{m} to open the Assist Menu, we need to rely on the Assist Menu to help us enter a literal @emph{m} when necessary. There is a potential conflict here. By default, the Assist Menu reserves @kbd{a} @kbd{c} @kbd{h} @kbd{m} and @kbd{s} to toggle pending modifiers then close the Assist Menu. To ensure that @kbd{m} inserts a literal @emph{m}, @kbd{m} is removed from the list of keys that toggle pending modifiers in these configurations. For clarity and consistency, we also remove @emph{c} from the Assist Menu in these configurations.

The Assist Menu displays itself according to the keys as you've configured them. When using the default configuration, for example, the Assist Menu will display itself (when open and expanded) like this: @code{[achms jkl q x ;]}. In these configurations, it will display itself (when open and expanded) like this: @code{[ahs ,.m q x /]}.

@quotation
Note that, by default, the Assist Menu also reserves @kbd{A} @kbd{C} @kbd{H} @kbd{M} and @kbd{S} as the @ref{Persistent keys,,persistent} versions of @kbd{a} @kbd{c} @kbd{h} @kbd{m} and @kbd{s}, respectively. None of the persistent versions of these keys are removed from these configurations, so there does remain a means to toggle @kbd{Control} and @kbd{Meta} from the Assist Menu if desired.
@end quotation
@item
@code{control‑jk}

Activation keys can also function as modifiers, allowing you to both activate Loco and set a pending modifier with a single key.

In this configuration, @kbd{C-j} and @kbd{C-k} both activate Loco to read a key sequence and execute the command to which it is bound, but @kbd{C-j} activates Loco with @kbd{Control} pending and @kbd{C-k} with @kbd{Meta} pending.

For purposes of describing a key sequence, @kbd{C-h C-j} activates Loco with @kbd{Control} pending and @kbd{C-h C-k} with @kbd{Meta} pending.

Entering key sequences is similar to @code{shift‑return‑jk}, @code{control‑return‑jk}, and @code{super‑return‑jk}, but this configuration will also strip all modifiers from any key that it reads.

As per @ref{Working with physical modifier keys,,Working with physical modifier keys}, Loco is happy to merge any modified keys with any pending modifiers. When activating Loco with a key that is similar to the keys required to toggle pending modifiers, accidentally holding any physical modifier key past its intended key may modify subsequent keys, resulting in a key sequence bound to a different command that intended. Stripping modifiers from keys allows for some forgiveness when typing quickly, to ensure the modifiers aren't incorrectly applied to the wrong keys.

@item
@code{super‑jk}

This configuration is similar to @code{control‑jk}, but uses different modifier keys for activation.

In this configuration, @kbd{s-j} and @kbd{s-k} both activate Loco to read a key sequence and execute the command to which it is bound, but @kbd{s-j} activates Loco with @kbd{Control} pending and @kbd{s-k} with @kbd{Meta} pending.

For purposes of describing a key sequence, @kbd{C-h s-j} activates Loco with @kbd{Control} pending and @kbd{C-h s-k} with @kbd{Meta} pending.

Entering key sequences is similar to @code{shift‑return‑jk}, @code{control‑return‑jk}, and @code{super‑return‑jk}, but this configuration will also strip all modifiers from any key that it reads, similar to @code{control‑jk}.

@item
@code{control‑cp}

In this configuration, @kbd{C-,} and @kbd{C-.} both activate Loco to read a key sequence and execute the command to which it is bound, but @kbd{C-,} activates Loco with @kbd{Control} pending and @kbd{C-.} with @kbd{Meta} pending.

For purposes of describing a key sequence, @kbd{C-h C-,} activates Loco with @kbd{Control} pending and @kbd{C-h C-.} with @kbd{Meta} pending.

Entering key sequences is similar to @code{shift‑return‑cp}, @code{control‑return‑cp}, and @code{super‑return‑cp}, but this configuration will also strip all modifiers from any key that it reads, similar to @code{control‑jk} and @code{super-jk}.

@item
@code{super‑cp}

In this configuration, @kbd{s-,} and @kbd{s-.} both activate Loco to read a key sequence and execute the command to which it is bound, but @kbd{s-,} activates Loco with @kbd{Control} pending and @kbd{s-.} with @kbd{Meta} pending.

For purposes of describing a key sequence, @kbd{C-h s-,} activates Loco with @kbd{Control} pending and @kbd{C-h s-.} with @kbd{Meta} pending.

Entering key sequences is similar to @code{shift‑return‑cp}, @code{control‑return‑cp}, and @code{super‑return‑cp}, but this configuration will also strip all modifiers from any key that it reads, similar to @code{control‑jk}, @code{super-jk}, and @code{control-cp}.

@item
@code{double-tap‑cp}

Activation keys can avoid modifiers completely, allowing you use Loco without using any physical modifier keys.

In this configuration, @kbd{,} and @kbd{.} both activate Loco to read a key sequence and execute the command to which it is bound, but @kbd{,} activates Loco with @kbd{Control} pending and @kbd{.} with @kbd{Meta} pending.

For purposes of describing a key sequence, @kbd{C-h ,} activates Loco with @kbd{Control} pending and @kbd{C-h .} with @kbd{Meta} pending.

Entering key sequences is similar to @code{shift‑return‑cp}, @code{control‑return‑cp}, and @code{super‑return‑cp}, but this configuration will also strip all modifiers from any key that it reads, similar to @code{control‑jk}, @code{super-jk}, @code{control-cp}, and @code{super-cp}. It will also apply the @emph{double-tap} rule.

The effect of setting unmodified @kbd{,} and @kbd{.} as activation keys is significant. By rebinding them to activation keys, they no longer perform their original purpose: to enter a literal comma or period, respectively. Both are essential punctuation, second only to the letters and digits in terms of frequency of use.

The double-tap rule, for this configuration, states that if @kbd{,} is pressed when @kbd{Control} is the @emph{only} pending modifier, or if @kbd{.} is pressed when @kbd{Meta} is the @emph{only} pending modifier, clear the modifier and add the key @emph{unmodified} to the key sequence.

This rule permits @kbd{,} and @kbd{.} to be entered as @kbd{, ,} or @kbd{. .}, respectively. It is called double-tap because it takes effect when these keys are tapped twice in succession (provided no other modifiers are in effect).

Without this rule, entering a literal comma or period would be unduly onerous. For example, here are four alternate ways by which you could enter a literal comma or period, respectively:

@enumerate 
@item
@kbd{, m C ,} or @kbd{. m M .}

This method uses the Assist Menu (once), but uses a @ref{Persistent keys,,persistent key} to keep the menu open.

@item
@kbd{, m c m ,} or @kbd{. m m m .}

This method uses the Assist Menu (twice), but does not require a physical modifier key.

@item
@kbd{C-q ,} or @kbd{C-q .}

In Emacs, @kbd{C-q} is bound to the command @code{quoted-insert}, which will read the next key and insert it. This method uses @code{quoted-insert}, but requires a physical modifier key.

@item
@kbd{, q ,} or @kbd{, q .}

@kbd{C-q} itself can be entered as @kbd{, q}. This method uses @code{quoted-insert}, but does not require a physical modifier key.

@end enumerate

While the double-tap rule makes entering a literal comma or period easy, it does come with a cost.

Without this rule, @kbd{, ,} would be translated to @kbd{C-,}. The first @kbd{,} would tell Loco to consider @kbd{Control} as pending, and the second @kbd{,} would tell Loco to apply @kbd{Control} to @kbd{,}.

Similarly, @kbd{. .} would be translated to @kbd{M-.}. The first @kbd{.} would tell Loco to consider @kbd{Meta} as pending, and the second @kbd{.} would tell Loco to apply @kbd{Meta} to @kbd{.}.

While @kbd{C-,} and @kbd{M-.} are less frequently used than literal commas and periods (@kbd{C-,} is not bound to any command and @kbd{M-.} is bound to @code{xref-find-definition}), we must still be able to enter them.

Fortunately, we can use the Assist Menu for this. @kbd{C-,} and @kbd{M-.} can be entered as @kbd{, m ,} and @kbd{. m .}, respectively.

@end itemize

@node Summary
@subsection Summary
@multitable {@code{control‑return‑cp}} {@kbd{s‑,} and apply @kbd{Control}, @kbd{s‑.} and apply @kbd{Meta}} {Apply @kbd{Control}} {Apply @kbd{Meta}} {@kbd{m}} {@kbd{/}} {✔︎} {✔︎} 
@headitem 
Name
 @tab Activate
 @tab Apply @kbd{Control}
 @tab Apply @kbd{Meta}
 @tab O
 @tab E@ &@ C
 @tab S
 @tab DT
@item 
@code{shift‑return‑jk}
 @tab @kbd{S‑<return>}
 @tab @kbd{j}
 @tab @kbd{k}
 @tab @kbd{l}
 @tab @kbd{;}
 @tab 
 @tab 
@item 
@code{control‑return‑jk}
 @tab @kbd{C‑<return>}
 @tab @kbd{j}
 @tab @kbd{k}
 @tab @kbd{l}
 @tab @kbd{;}
 @tab 
 @tab 
@item 
@code{super‑return‑jk}
 @tab @kbd{s‑<return>}
 @tab @kbd{j}
 @tab @kbd{k}
 @tab @kbd{l}
 @tab @kbd{;}
 @tab 
 @tab 
@item 
@code{shift‑return‑cp}
 @tab @kbd{S‑<return>}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab 
 @tab 
@item 
@code{control‑return‑cp}
 @tab @kbd{C‑<return>}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab 
 @tab 
@item 
@code{super‑return‑cp}
 @tab @kbd{s‑<return>}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab 
 @tab 
@item 
@code{control‑jk}
 @tab @kbd{C‑j} and apply @kbd{Control}, @kbd{C‑k} and apply @kbd{Meta}
 @tab @kbd{j}
 @tab @kbd{k}
 @tab @kbd{l}
 @tab @kbd{;}
 @tab ✔︎
 @tab 
@item 
@code{super‑jk}
 @tab @kbd{s‑j} and apply @kbd{Control}, @kbd{s‑k} and apply @kbd{Meta}
 @tab @kbd{j}
 @tab @kbd{k}
 @tab @kbd{l}
 @tab @kbd{;}
 @tab ✔︎
 @tab 
@item 
@code{control‑cp}
 @tab @kbd{C‑,} and apply @kbd{Control}, @kbd{C‑,} and apply @kbd{Meta}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab ✔︎
 @tab 
@item 
@code{super‑cp}
 @tab @kbd{s‑,} and apply @kbd{Control}, @kbd{s‑.} and apply @kbd{Meta}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab ✔︎
 @tab 
@item 
@code{double‑tap‑cp}
 @tab @kbd{,} and apply @kbd{Control}, @kbd{.} and apply @kbd{Meta}
 @tab @kbd{,}
 @tab @kbd{.}
 @tab @kbd{m}
 @tab @kbd{/}
 @tab ✔︎
 @tab ✔︎
@end multitable

@itemize
@item
O: Open the Assist@ Menu
@item
E@ &@ C: Expand@ &@ Collapse the Assist@ Menu
@item
S: Strip modifiers
@item
DT: Enable the double-tap rule
@end itemize

@node Repeating commands
@section Repeating commands
One advantage of using physical modifier keys is that once held, the non-modifier key can be pressed multiple times in sequence to repeat the command.

Emacs provides a @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Repeating.html,number of ways} to assist with repeating a command, and Loco works well with all of them. In particular, using @code{repeat-mode} to setup groups of commands that can be repeated by pressing only their last letter is highly recommended.

@node Working with physical modifier keys
@section Working with physical modifier keys
While Loco aims to replace the need for physical modifier keys, there may be some cases where you want to use key bindings that use them. Because Loco does not replace or disable any keymaps, you are able to use other key bindings as you see fit.

Furthermore, while not necessary, any physical modifier keys you use while entering key sequences in Loco are properly merged with the set of pending modifiers.

@node Considerations when using a terminal
@section Considerations when using a terminal
In a GUI environment, applications receive key events directly from the @uref{https://en.wikipedia.org/wiki/Windowing_system,windowing system} (for example, X11, Wayland, or Quartz Compositor). These systems have comprehensive support for detecting various key combinations, including multiple modifiers pressed simultaneously with other keys. The only limitation is usually from the operating system itself, which reserves certain key combinations for its own functions.

Modern terminal applications are typically run within a @uref{https://en.wikipedia.org/wiki/Terminal_emulator,terminal emulator}, an application that itself reserves certain key combinations for its own functions. This creates a disparity between the total number of keys available to the GUI application and the terminal application.

Terminal emulators are designed to mimic the behaviour of older physical terminals (for example, the @uref{https://en.wikipedia.org/wiki/VT100,VT100}). Most terminal emulators work by encoding input into characters or escape sequences that the terminal application interprets. This limits how key events are handled by terminal applications in several ways:

@itemize
@item
The @kbd{Control} key is typically limited to modifying these specific 32 characters: @code{@@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ?}. These characters have @uref{https://en.wikipedia.org/wiki/ASCII,ASCII} codes of 64 to 95 inclusive. When pressed in conjunction with @kbd{Control}, 64 is subtracted from their ASCII code, resulting in a @uref{https://en.wikipedia.org/wiki/Control_character,Control Character}. This form of encoding inherently limits which combinations are possible with @kbd{Control} and does not work well in conjunction with any other modifier key.

@item
Other modifier keys, and keys without ASCII equivalents (for example, the arrow and function keys), are either encoded as character sequences beginning with the @kbd{ESC} character or not sent to terminal applications at all. Interpreting these sequences can be less reliable, especially for complex combinations involving multiple modifiers.

@end itemize

By translating simple key sequences into complex ones, Loco can avoid the above limitations.

Note that even the default configuration may not work perfectly in all terminals, as certain terminal emulators will not recognize its activation key, @kbd{S-<return>}. @code{control-jk} and @code{double-tap-cp} are the only standard configurations guaranteed to work in terminals.

@node Customization
@section Customization
@quotation
Some of this section assumes the reader has basic experience with @uref{https://www.gnu.org/software/emacs/manual/html_node/eintr/,Emacs Lisp}.
@end quotation

@menu
* Using the "Easy Customization Interface"::
* Mapping Caps Lock to Control::
* Going further::
@end menu

@node Using the "Easy Customization Interface"
@subsection Using the "Easy Customization Interface"
The @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html,Easy Customization Interface} can be used to customize certain properties of Loco, including its lighter and its prompts.

@quotation
You can also customize properties related to logging, which is useful if you are planning on modifying the source code for Loco. Logging is not explained in this document; see the source code for details.
@end quotation
Some of the properties presented in this interface take @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html,S-expressions} as values. These permit more possibilities for values; for example, strings styled with custom colours and fonts.

All of the properties presented in this interface can be set using Emacs Lisp as well.

@node Mapping Caps Lock to Control
@subsection Mapping Caps Lock to Control
@kbd{S-<return>} is easy to press, but it would be easier still to be able to activate Loco with a physical modifier key located right on the home row. If this physical modifier key were @kbd{Control}, you would also have quick access to some very common Emacs key bindings without use of Loco. For example, @kbd{C-n} and @kbd{C-p}.

@kbd{Caps Lock}, located to the left of @kbd{a} on a QWERTY keyboard, is a rarely-used key in a prime location. As such, it is common to remap this key to @kbd{Control}.

For most operating systems, there is both built-in support and third-party tools available to remap keys.

For example, on MacOS, where keys are not easily remapped system-wide, mapping @kbd{Caps Lock} to @kbd{Control} is possible without third-party tools:

@itemize
@item
In @emph{System Preferences > Keyboard > Keyboard Shortcuts... > Modifier Keys}, change @emph{Caps Lock key} to @emph{Control}.

@item
(Optional) You may also want to change @emph{Control key} to @emph{Caps Lock}, effectively swapping the behaviour of the two keys, to ensure you still have a means to toggle @kbd{Caps Lock} if desired.

@item
(Optional) If you use multiple keyboards, ensure that you change these settings for each keyboard appropriately by selecting each keyboard in turn at the top of the dialog box.

@item
Press @emph{Done} when complete.

@end itemize

@node Going further
@subsection Going further
With only a few lines of code, you can specify the key sequences to enable, disable, and activate Loco, as well as the set of keys and behaviours for entering key sequences.

See the commands @code{loco-set-standard-configuration} and @code{loco-unset-default-configuration} in the source code to understand how key sequences are bound and unbound, respectively, to enable, disble, and activate Loco for each standard configuration (including the default configuration).

See the command @code{loco-read-kseq} in the source code to understand how the set of keys and behaviours are specified for entering key sequences. Note that all standard configurations ultimately call this one command. It accepts many keyword arguments, all of which are explained in the documentation for that command.

@node Author and copyright
@chapter Author and copyright
This project was written and copyrighted in 2024 by Chris McLaren (@uref{https://www.github.com/csmclaren,@@csmclaren}).

@node License
@chapter License
Unless otherwise noted, all files in this project are licensed under the @uref{https://www.gnu.org,GNU} General Public License v3.0. See the @uref{/COPYING,COPYING} file for details.

@node Colophon
@chapter Colophon
The logo for Loco is a representation of a @uref{https://en.wikipedia.org/wiki/Tram,tram} car from the @uref{https://home.unicode.org,Unicode} chart @uref{https://unicode.org/charts/PDF/U1F680.pdf,Transport and Map Symbols}. Loco was created in Lisbon, Portugal, a city with a @uref{https://en.wikipedia.org/wiki/Trams_in_Lisbon,history} of using tram cars such as these.

This document was produced on September 15, 2025.

@bye
